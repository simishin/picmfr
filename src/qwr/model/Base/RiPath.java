/**
Описание места нахождения локальных и внешних данных.
 Для обеспечения прав доступа средствами ОС элемент содержит полный путь к файлу.

 Элемент содержит следующую информацию:
 -String filePath -- полный путь к файлу
 -int change -- относительное время модификации
 -int parameter -- характеристика данного файла
int parameter  : VV NS TI II где:
 S - тип источника элемента
 * 0 - из документов и по умолчанию
 * 1 - файлы и папки локальной базы
 * 2 - создан или получен из командной строки
 * 3 - файлы и папки внешних данных не синхронизируемых (данные берутся но не проверяются)
 * 4,5,6,7. - файлы и папки внешних данных подлежащих синхронизации изменения данных
 N- назначение :
1) 0001 локальные данные, где файлы находятся в разных папках;
2) внешние данные с контролируемой синхронизацией;
3) внешние данные без синхронизации;
4) общие проектные справочники;
5) 1000 глобальные справочники (имя не соответствует имени проекта);
6) файлы таблиц исходных данных для подкачки (только путь);
7) отчеты о выполнении, таблицы (только путь).
 T - периодичность просмотра изменений в простом режиме и турбо(обнаружены изменения)
режим турбо включается при обнаружении изменений, а отключается после 12 периодов не активности
0) только при включении / только по команде
1) несколько раз в день / только при включении
2) ежечасно / несколько раз в день
4) постоянное сканирование раз в минуту / каждые 12 минут
 V - тип файла, соответствующий GrRecords.ordinal()
 I - порядковый номер, для связи со временным массивом фиксации
доступности файла, синхронизации, периодичности просмотра (не сохраняется)
(4-65535, 3-4096)
 */
package qwr.model.Base;

import java.util.InputMismatchException;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;//синхронизованный список
import static qwr.util.CollectUtl.*;

public record RiPath(int change, int parameter, String filePath) {
    public static List<RiPath> list = new CopyOnWriteArrayList<>();
    public static final int sizeAr=4;//количество полей в текстовом файле данных
    @Override
    public String toString() {//создание строки для записи в текстовый файл
        return sepr+ change + sepr+ parameter + sepr+ filePath + sepr;
    }//toString
    /** интеграция данных в коллекцию вызывается из GrRecords.*.readRecord
     * @param words поток с исходными данными из массива слов строки ввода
     * @param src тип источника элемента
     * 0 - из документов и по умолчанию
     * 1 - файлы и папки локальной базы
     * 2 - создан или получен из командной строки
     * 3 - файлы и папки внешних данных не синхронизируемых (данные берутся но не проверяются)
     * 4,5,6,7. - файлы и папки внешних данных подлежащих синхронизации изменения данных
     * @return 0 без изменений, 1 переписаны поля, 2 заменяем, 3 добавлен, 4 первый,
     * -1 пропускаю элемент, -2 игнорировать по несответствию, -3 запрещенное состояние
     */
    public static int integrate(String[] words, int src){
        if (words.length < sizeAr) {
            for (int i = 0; i < words.length; i++) prnt("+  "+i+"-"+words[i]);prnq("~"+words.length);
            return -2; //недостаточное количество элементов
        }
        RiPath z;
        try { z = new RiPath(
            Integer.parseInt(words[1]),//int change
            Integer.parseInt(words[2]),//int parameter
            words[3] //filePath -- полный путь к файлу
        ); }
        catch (InputMismatchException ex){ return -4;}
        catch (Exception ex) {System.out.println(ex.getMessage());return -3;}
        if (list.size()<1) { list.add(z); return 4;}
        switch (src) {
            case 1:
                for (RiPath x : list) {
                    if (x.filePath.equals(z.filePath)) return -1;
                }
                list.add(z);
                return 3;
            default:return -7;
        }//switch
//        return -5;
    }//integrate

    public static void start(){

    }
}//RiPath
/*
технология работы с файлами:
Существуют три потока с разной интенсивностью работы
Первый поток обрабатывает запись в файлы и на основе очереди запросов
на сохранение данных. При модификации данных выставляется флаг или делается запись
в очередь. С интенсивностью раз в 3 минуты вызывается поток записи. При обнаружении
флага или элемента в очереди проверяется доступность файла для записи.
Если файл свободен, то производим запись и сбрасываем флаг, освобождаю очередь.
Если файл занят, то перехожу к просмотру следующих флагов.
За каждый вызов просматриваю один раз все флаги.

Второй поток малой интенсивности просматривает файлы внешних данных, не требующих
оперативной синхронизации. Интенсивность вызова потока в пассивном режиме выполняется
раз в час, а в активном режиме каждые 12 минут.
Для каждого из файлов устанавливается индивидуально режим активного или пассивного
сканирования в зависимости от наличия изменений в файлах.
Факт модификации файлов определяется по контрольной сумме и времени создания и
модификации файла индивидуально.
Если обнаружен факт модификации, то включается активный режим сканирования.
По истечению часа, после последней модификации режим работы с файлом меняется на пассивный.
Все отличия между локальными данными и внешними записываются в очередь.
Для каждого типа локального файла создается своя очередь различий с внешними источниками данных.

Третий поток высокой интенсивности отличается от второго потока периодичностью вызова
- в активном режиме раз в 3 минуты, а в пассивном режиме раз в полчаса.
Переход в пассивный режим через полтора часа или 2 часа (больше времени обеда)
Очередь различий используется также, что и для по потока малой интенсивности.

Работа очереди различий. Запись.
Для участия в сравнении элемент не должен содержать пометку не используется и устарел.
Элемент помеченный как устаревший только резервирует ключ.

Работа очереди различий. Удаление.
Удаление элемента из очереди различий происходит при создании аналога элемента
в основном списке либо принятия данных из внешнего источника для обновления элемента
и после сохранения основного списка в файле. Если изменения из внешнего источника
не приняты тогда элемент в очереди различий помечается как устаревший для дальнейшего
анализа других внешний источников либо может быть включен в список устаревших значений
либо включен в основной список как устаревшее значение.
 */